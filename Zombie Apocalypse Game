#GO TO http://www.codeskulptor.org/#user41_RLRU59vsloJ3nyS.py TO PLAY
#USED 'poc_zombie_gui' AND 'poc_grid' CLASS PROVIDED BY THE COURSE FOR GUI
"""
Zombie Apocalypse Game
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = 5
HUMAN = 6
ZOMBIE = 7


class Apocalypse(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        if obstacle_list != None:
            self._obstacle_list = obstacle_list
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []
        self._human_list = []
           
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row, col))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)      
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        # replace with an actual generator
        for zombie in self._zombie_list:
            yield zombie

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row, col))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        # replace with an actual generator
        for human in self._human_list:
            yield human
        
    def compute_distance_field(self, entity_type):
        """
        Function computes and returns a 2D distance field
        Distance at member of entity_list is zero
        Shortest paths avoid obstacles and use four-way distances
        """

        
        distance_field =[[self._grid_height * self._grid_width for dummy_col in range(self._grid_width)] 
                         for dummy_row in range(self._grid_height)]
            
        visited =  poc_grid.Grid(self._grid_height, self._grid_width)
        
        boundary = poc_queue.Queue()
        
        entity_list=[]
        if entity_type == HUMAN:
            entity_list = self._human_list
        elif entity_type == ZOMBIE:
            entity_list = self._zombie_list
        
        for item in entity_list: 
            distance_field[item[0]][item[1]] = 0
            boundary.enqueue(item)       #copy of entity list
            visited.set_full(item[0], item[1])
        
        while boundary:
            
            present_cell = boundary.dequeue()
            neighbors = visited.four_neighbors(present_cell[0], present_cell[1])
            
            for neighbor in neighbors: 
                if visited.is_empty(neighbor[0],neighbor[1]):
                    
                    distance_field[neighbor[0]][neighbor[1]] = min(distance_field[neighbor[0]][neighbor[1]],
                                                               (distance_field[present_cell[0]][present_cell[1]] +1))
                    
                    
                    visited.set_full(neighbor[0],neighbor[1])
                    boundary.enqueue(neighbor)
        
       
        return distance_field
    
    def move_humans(self, zombie_distance_field):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """ 
        temp_human_list = []
        
        for human in  self._human_list:
            
            neighbors = self.eight_neighbors(human[0],human[1]) 
            max_dis = zombie_distance_field[human[0]][human[1]]
            
            new_pos = human
            
            for neighbor in neighbors:
                
                if self.is_empty(neighbor[0],neighbor[1]) and zombie_distance_field[neighbor[0]][neighbor[1]]>max_dis:
                        
                        max_dis = zombie_distance_field[neighbor[0]][neighbor[1]]
                        new_pos=neighbor
            
            temp_human_list.append(new_pos)
        
        self._human_list = temp_human_list  
        return temp_human_list    
        
    
    def move_zombies(self, human_distance_field):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        temp_zombie_list = []
        
        for zombie in self._zombie_list:
            
            neighbors = self.four_neighbors(zombie[0],zombie[1])
            min_dis = human_distance_field[zombie[0]][zombie[1]]
            
            new_pos = zombie
            
            for neighbor in neighbors:
                
                if self.is_empty(neighbor[0],neighbor[1]) and human_distance_field[neighbor[0]][neighbor[1]]<min_dis:
                    min_dis = human_distance_field[neighbor[0]][neighbor[1]]
                    new_pos = neighbor
                
            temp_zombie_list.append(new_pos)
            
            
        self._zombie_list = temp_zombie_list
        return self._zombie_list

# Start up gui for simulation - You will need to write some code above
# before this will work without errors

poc_zombie_gui.run_gui(Apocalypse(30, 40))
